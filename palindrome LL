/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode middle(ListNode head){
        ListNode turtle=head;
        ListNode rabbit=head;
        while(rabbit.next!=null&&rabbit.next.next!=null){
            rabbit=rabbit.next.next;
            turtle=turtle.next;
        }
        return turtle;
    }
    public ListNode reverselist(ListNode head){
        if(head==null||head.next==null){
            return head;
        }
        ListNode newhead=reverselist(head.next);
        head.next.next=head;
        head.next=null;
        return newhead;
    }
    public boolean isPalindrome(ListNode head) {
        if(head==null||head.next==null){
            return true;
        }
        int size=0;
        ListNode curr=head;
        while(curr!=null){
            size++;
            curr=curr.next;
        }
        ListNode secondhead= middle(head);
        ListNode revhead=reverselist(secondhead.next);
        ListNode curr1=head;
        ListNode curr2=revhead;
        while(curr2!=null){
            if(curr1.val!=curr2.val){
                return false;
            }
            curr2=curr2.next;
            curr1=curr1.next;
        }
        return true;
        
    }
}
